import React from "react";
import { useState, useEffect } from "react";
import axios from "axios";
import Filter from "./components/Filter";
import Form from "./components/Form";
import Name from "./components/Name";
import personsService from "./services/persons";

// const Persons = () => {};

const App = () => {
  const [persons, setPersons] = useState([]);
  const [newName, setNewName] = useState("");
  const [newNumber, setNewNumber] = useState("");
  const [newSearch, setNewSearch] = useState("");

  useEffect(() => {
    personsService.getAll().then((initialPersons) => {
      setPersons(initialPersons);
    });
  }, []);

  console.log("render", persons.length, "persons");

  const addName = (event) => {
    event.preventDefault();
    const trimmedName = newName.trim().replace(/\s+/g, " ");

    const directory = {
      name: trimmedName,
      number: newNumber,
      // id: persons.length + 1, removed since now ids are being generated by the server
    };

    const sameContact = persons.some(
      (person) => person.name === trimmedName && person.number === newNumber
    );
    const numberChecker = persons.some(
      (person) => person.name === trimmedName && person.number !== newNumber
    );

    if (sameContact) {
      alert(`${trimmedName} is already added to phonebook`);
    } else if (numberChecker) {
      if (
        window.confirm(
          `${trimmedName} is already added to phonebok, replace the old number with a new one?`
        )
      ) {
        const savedContact = persons.find(
          (person) => person.name === trimmedName
        );
        personsService
          .update(savedContact.id, { ...savedContact, number: newNumber })
          .then((updatedContact) => {
            setPersons(
              persons.map((person) =>
                person.name === trimmedName ? updatedContact : person
              )
            );
            setNewName("");
            setNewNumber("");
          });
      }
    } else {
      personsService.create(directory).then((newContact) => {
        setPersons(persons.concat(newContact));
        setNewName("");
        setNewNumber("");
      });
    }

    // axios.post("http://localhost:3005/persons", directory).then((response) => {
    //   console.log(response);
    // });
  };

  // const updatePerson = (id, newObject) => {
  //   personsService
  //     .update(id, newObject)
  //     .then((returnedPerson) => {
  //       setPersons(
  //         persons.map((person) => (person.id !== id ? person : returnedPerson))
  //       );
  //     })
  //     .catch((error) => {
  //       console.log(`Error updating person with ID ${id}`);
  //       setPersons(persons.fliter((p) => p.id !== id));
  //     });
  // };

  // const handleDelete = (id) => {
  //   // personsService
  //   //   .remove(id)
  //   //   .then(() => {
  //   //     setPersons(persons.filter((person) => person.id !== id));
  //   //   })
  //   //   .catch((error) => {
  //   //     console.log(`Error deleting person with ID ${id}`);
  //   //   });
  //   let deletePerson = confirm(`Do you want to delete ${id}?`);
  //   if (deletePerson) {
  //     personsService
  //       .remove(`http://localhost:3005/persons/${id}`)
  //       .then((data) =>
  //         setPersons(persons.filter((person) => person.id !== id))
  //       );
  //   }
  // };

  const handleDelete = (id, name) => {
    let deletePerson = window.confirm(`Do you want to delete ${name}?`);
    if (deletePerson) {
      personsService.remove(id).then(() => {
        setPersons(persons.filter((person) => person.id !== id));
        setNewName("");
        setNewNumber("");
      });
    }
  };

  const handleNumberChange = (event) => {
    setNewNumber(event.target.value);
  };

  const handleNameChange = (event) => {
    setNewName(event.target.value);
  };

  const handleSearch = (event) => {
    setNewSearch(event.target.value);
  };

  // const filter = (searchValue) => {
  //   if (searchValue !== "") {
  //     const results = persons.filter((person) =>
  //       person.name.toLowerCase().startsWith(searchValue.toLowerCase())
  //     );
  //     setFilteredUsers(results);
  //   } else {
  //     setFilteredUsers(persons);
  //   }
  //   console.log(filteredUsers > 0)
  // };
  // I deleted this funciton as it was keeping data in two different states and that is what I need to avoid in React. Instead, filteredUsers()

  const filteredUsers = persons.filter((person) =>
    person.name.toLowerCase().startsWith(newSearch.toLowerCase())
  );

  return (
    <div>
      <Filter
        title={"PhoneBook"}
        handleSearch={handleSearch}
        newSearch={newSearch}
      />
      <Form
        doSomething={addName}
        newName={newName}
        handleNameChange={handleNameChange}
        newNumber={newNumber}
        handleNumberChange={handleNumberChange}
        button={"add"}
      />
      <h2>Numbers</h2>
      <ul>
        {filteredUsers.map((person) => (
          <Name
            id={person.id}
            key={person.id}
            name={person.name}
            number={person.number}
            handleDelete={handleDelete}
          />
        ))}
      </ul>
    </div>
  );
};

export default App;
